# -*- coding: utf-8 -*-
"""Untitled53.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sNrjJkG0FOBeg_DAG90H99XZ_oLcj5qd
"""

import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image
import cv2

# Custom CSS styling
st.markdown("""
    <style>
        .main {
            background-color: #f9f9f9;
        }
        .title {
            font-size: 48px;
            font-weight: bold;
            color: #4B8BBE;
            text-align: center;
        }
        .subtitle {
            font-size: 20px;
            color: #555;
            text-align: center;
            margin-bottom: 20px;
        }
        .pred-box {
            background-color: #E6F2FF;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            margin-top: 20px;
        }
        .confidence {
            font-size: 18px;
            color: #1A5276;
        }
    </style>
""", unsafe_allow_html=True)

# Load model
@st.cache_resource
def load_model():
    return tf.keras.models.load_model("model.keras")


model = load_model()

# Title and Description
st.markdown('<div class="title">üñãÔ∏è Handwritten Character Recognition</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">Upload a 28x28 grayscale handwritten letter image (like EMNIST format) to see its prediction.</div>', unsafe_allow_html=True)

# Upload image
uploaded_file = st.file_uploader("üì§ Upload a Handwritten Image", type=["png", "jpg", "jpeg"])

# Preprocessing function
def preprocess_image(image):
    image = image.convert('L')  # Convert to grayscale
    image = image.resize((28, 28))  # Resize
    img_array = np.array(image)
    img_array = cv2.bitwise_not(img_array)  # Invert black-white if needed
    img_array = img_array / 255.0  # Normalize
    img_array = img_array.reshape(1, 28, 28, 1)  # Add batch & channel dim
    return img_array

class_names = [chr(i) for i in range(65, 91)]  # A-Z

# Prediction and display
if uploaded_file is not None:
    image = Image.open(uploaded_file)

    st.image(image, caption="üñºÔ∏è Uploaded Image", use_column_width=False, width=150)

    with st.spinner('üîç Analyzing...'):
        img_array = preprocess_image(image)
        prediction = model.predict(img_array)
        predicted_label = np.argmax(prediction)
        confidence = np.max(prediction)

    # Display prediction
    st.markdown(f"""
        <div class="pred-box">
            <h2>üìñ Predicted Character: <span style='color:#1A5276;'>{class_names[predicted_label]}</span></h2>
            <p class="confidence">üî¨ Confidence: <strong>{confidence * 100:.2f}%</strong></p>
        </div>
    """, unsafe_allow_html=True)

else:
    st.info("‚¨ÜÔ∏è Please upload an image to get started.")